var angular2_1 = require('angular2/angular2');
var Session = (function () {
    function Session() {
        this.loggedinEmitter = new angular2_1.EventEmitter();
        this.userEmitter = new angular2_1.EventEmitter();
    }
    Session.prototype.isLoggedIn = function (observe) {
        if (observe === void 0) { observe = null; }
        if (observe) {
            this.loggedinEmitter.observer({ next: function (is) {
                    if (is)
                        observe(true);
                    else
                        observe(false);
                }
            });
        }
        if (window.Minds.LoggedIn)
            return true;
        return false;
    };
    Session.prototype.getLoggedInUser = function (observe) {
        if (observe === void 0) { observe = null; }
        if (observe) {
            this.userEmitter.observer({ next: function (user) {
                    observe(user);
                } });
        }
        if (window.Minds.user)
            return window.Minds.user;
        return false;
    };
    Session.prototype.login = function (user) {
        if (user === void 0) { user = null; }
        this.loggedinEmitter.next(true);
        this.userEmitter.next(user);
    };
    Session.prototype.logout = function () {
        this.loggedinEmitter.next(false);
        this.userEmitter.next(null);
    };
    return Session;
})();
exports.Session = Session;
var injector = angular2_1.Injector.resolveAndCreate([
    angular2_1.bind(Session).toFactory(function () {
        return new Session();
    })
]);
var SessionFactory = (function () {
    function SessionFactory() {
    }
    SessionFactory.build = function () {
        return injector.get(Session);
    };
    return SessionFactory;
})();
exports.SessionFactory = SessionFactory;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2aWNlcy9zZXNzaW9uLnRzIl0sIm5hbWVzIjpbIlNlc3Npb24iLCJTZXNzaW9uLmNvbnN0cnVjdG9yIiwiU2Vzc2lvbi5pc0xvZ2dlZEluIiwiU2Vzc2lvbi5nZXRMb2dnZWRJblVzZXIiLCJTZXNzaW9uLmxvZ2luIiwiU2Vzc2lvbi5sb2dvdXQiLCJTZXNzaW9uRmFjdG9yeSIsIlNlc3Npb25GYWN0b3J5LmNvbnN0cnVjdG9yIiwiU2Vzc2lvbkZhY3RvcnkuYnVpbGQiXSwibWFwcGluZ3MiOiJBQUdBLHlCQUE2QyxtQkFBbUIsQ0FBQyxDQUFBO0FBRWpFO0lBQUFBO1FBQ0NDLG9CQUFlQSxHQUFHQSxJQUFJQSx1QkFBWUEsRUFBRUEsQ0FBQ0E7UUFDckNBLGdCQUFXQSxHQUFHQSxJQUFJQSx1QkFBWUEsRUFBRUEsQ0FBQ0E7SUF3RGxDQSxDQUFDQTtJQW5EQUQsNEJBQVVBLEdBQVZBLFVBQVdBLE9BQW1CQTtRQUFuQkUsdUJBQW1CQSxHQUFuQkEsY0FBbUJBO1FBRTdCQSxFQUFFQSxDQUFBQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFBQSxDQUFDQTtZQUNYQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxRQUFRQSxDQUFDQSxFQUFDQSxJQUFJQSxFQUFFQSxVQUFDQSxFQUFFQTtvQkFDdkNBLEVBQUVBLENBQUFBLENBQUNBLEVBQUVBLENBQUNBO3dCQUNMQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDZkEsSUFBSUE7d0JBQ0hBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNoQkEsQ0FBQ0E7YUFDREEsQ0FBQ0EsQ0FBQ0E7UUFDSkEsQ0FBQ0E7UUFFREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7WUFDeEJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBRWJBLE1BQU1BLENBQUNBLEtBQUtBLENBQUFBO0lBQ2JBLENBQUNBO0lBS0RGLGlDQUFlQSxHQUFmQSxVQUFnQkEsT0FBbUJBO1FBQW5CRyx1QkFBbUJBLEdBQW5CQSxjQUFtQkE7UUFFbENBLEVBQUVBLENBQUFBLENBQUNBLE9BQU9BLENBQUNBLENBQUFBLENBQUNBO1lBQ1hBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFFBQVFBLENBQUNBLEVBQUNBLElBQUlBLEVBQUVBLFVBQUNBLElBQUlBO29CQUNyQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2ZBLENBQUNBLEVBQUNBLENBQUNBLENBQUNBO1FBQ0xBLENBQUNBO1FBRURBLEVBQUVBLENBQUFBLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBO1lBQ3BCQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUUxQkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFLREgsdUJBQUtBLEdBQUxBLFVBQU1BLElBQWlCQTtRQUFqQkksb0JBQWlCQSxHQUFqQkEsV0FBaUJBO1FBQ3RCQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNoQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDN0JBLENBQUNBO0lBS0RKLHdCQUFNQSxHQUFOQTtRQUNDSyxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNqQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDN0JBLENBQUNBO0lBRUZMLGNBQUNBO0FBQURBLENBMURBLEFBMERDQSxJQUFBO0FBMURZLGVBQU8sVUEwRG5CLENBQUE7QUFFRCxJQUFJLFFBQVEsR0FBRyxtQkFBUSxDQUFDLGdCQUFnQixDQUFDO0lBQ3hDLGVBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDdkIsTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUM7SUFDdEIsQ0FBQyxDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBRUg7SUFBQU07SUFJQUMsQ0FBQ0E7SUFIT0Qsb0JBQUtBLEdBQVpBO1FBQ0NFLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO0lBQzlCQSxDQUFDQTtJQUNGRixxQkFBQ0E7QUFBREEsQ0FKQSxBQUlDQSxJQUFBO0FBSlksc0JBQWMsaUJBSTFCLENBQUEiLCJmaWxlIjoic3JjL3NlcnZpY2VzL3Nlc3Npb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlc2lvbnNcbiAqL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgYmluZCB9IGZyb20gJ2FuZ3VsYXIyL2FuZ3VsYXIyJztcblxuZXhwb3J0IGNsYXNzIFNlc3Npb24ge1xuXHRsb2dnZWRpbkVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cdHVzZXJFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5cdC8qKlxuXHQgKiBSZXR1cm4gaWYgbG9nZ2VkaW4sIHdpdGggYW4gb3B0aW9uYWwgbGlzdGVuZXJcblx0ICovXG5cdGlzTG9nZ2VkSW4ob2JzZXJ2ZTogYW55ID0gbnVsbCl7XG5cblx0XHRpZihvYnNlcnZlKXtcblx0XHRcdHRoaXMubG9nZ2VkaW5FbWl0dGVyLm9ic2VydmVyKHtuZXh0OiAoaXMpID0+IHtcblx0XHRcdFx0aWYoaXMpXG5cdFx0XHRcdFx0b2JzZXJ2ZSh0cnVlKTtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdG9ic2VydmUoZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZih3aW5kb3cuTWluZHMuTG9nZ2VkSW4pXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdHJldHVybiBmYWxzZVxuXHR9XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgbG9nZ2VkaW4gdXNlclxuXHQgKi9cblx0Z2V0TG9nZ2VkSW5Vc2VyKG9ic2VydmU6IGFueSA9IG51bGwpe1xuXG5cdFx0aWYob2JzZXJ2ZSl7XG5cdFx0XHR0aGlzLnVzZXJFbWl0dGVyLm9ic2VydmVyKHtuZXh0OiAodXNlcikgPT4ge1xuXHRcdFx0XHRvYnNlcnZlKHVzZXIpO1xuXHRcdFx0fX0pO1xuXHRcdH1cblxuXHRcdGlmKHdpbmRvdy5NaW5kcy51c2VyKVxuXHRcdFx0cmV0dXJuIHdpbmRvdy5NaW5kcy51c2VyO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVtaXQgbG9naW4gZXZlbnRcblx0ICovXG5cdGxvZ2luKHVzZXIgOiBhbnkgPSBudWxsKXtcblx0XHR0aGlzLmxvZ2dlZGluRW1pdHRlci5uZXh0KHRydWUpO1xuXHRcdHRoaXMudXNlckVtaXR0ZXIubmV4dCh1c2VyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFbWl0IGxvZ291dCBldmVudFxuXHQgKi9cblx0bG9nb3V0KCl7XG5cdFx0dGhpcy5sb2dnZWRpbkVtaXR0ZXIubmV4dChmYWxzZSk7XG5cdFx0dGhpcy51c2VyRW1pdHRlci5uZXh0KG51bGwpO1xuXHR9XG5cbn1cblxudmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXG5cdGJpbmQoU2Vzc2lvbikudG9GYWN0b3J5KCgpID0+IHtcblx0XHRyZXR1cm4gbmV3IFNlc3Npb24oKTtcblx0fSlcbl0pO1xuXG5leHBvcnQgY2xhc3MgU2Vzc2lvbkZhY3Rvcnkge1xuXHRzdGF0aWMgYnVpbGQoKXtcblx0XHRyZXR1cm4gaW5qZWN0b3IuZ2V0KFNlc3Npb24pO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=