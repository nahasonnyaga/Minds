var angular2_1 = require('angular2/angular2');
var Session = (function () {
    function Session() {
        this.loggedinEmitter = new angular2_1.EventEmitter();
        this.userEmitter = new angular2_1.EventEmitter();
    }
    Session.prototype.isLoggedIn = function (observe) {
        if (observe === void 0) { observe = null; }
        if (observe) {
            this.loggedinEmitter.observer({ next: function (is) {
                    if (is)
                        observe(true);
                    else
                        observe(false);
                }
            });
        }
        if (window.Minds.LoggedIn)
            return true;
        return false;
    };
    Session.prototype.getLoggedInUser = function (observe) {
        if (observe === void 0) { observe = null; }
        if (observe) {
            this.userEmitter.observer({ next: function (user) {
                    observe(user);
                } });
        }
        if (window.Minds.user)
            return window.Minds.user;
        return false;
    };
    Session.prototype.login = function (user) {
        if (user === void 0) { user = null; }
        this.userEmitter.next(user);
        window.Minds.user = user;
        this.loggedinEmitter.next(true);
    };
    Session.prototype.logout = function () {
        this.loggedinEmitter.next(false);
        this.userEmitter.next(null);
    };
    return Session;
})();
exports.Session = Session;
var injector = angular2_1.Injector.resolveAndCreate([
    angular2_1.bind(Session).toFactory(function () {
        return new Session();
    })
]);
var SessionFactory = (function () {
    function SessionFactory() {
    }
    SessionFactory.build = function () {
        return injector.get(Session);
    };
    return SessionFactory;
})();
exports.SessionFactory = SessionFactory;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2aWNlcy9zZXNzaW9uLnRzIl0sIm5hbWVzIjpbIlNlc3Npb24iLCJTZXNzaW9uLmNvbnN0cnVjdG9yIiwiU2Vzc2lvbi5pc0xvZ2dlZEluIiwiU2Vzc2lvbi5nZXRMb2dnZWRJblVzZXIiLCJTZXNzaW9uLmxvZ2luIiwiU2Vzc2lvbi5sb2dvdXQiLCJTZXNzaW9uRmFjdG9yeSIsIlNlc3Npb25GYWN0b3J5LmNvbnN0cnVjdG9yIiwiU2Vzc2lvbkZhY3RvcnkuYnVpbGQiXSwibWFwcGluZ3MiOiJBQUdBLHlCQUE2QyxtQkFBbUIsQ0FBQyxDQUFBO0FBRWpFO0lBQUFBO1FBQ0NDLG9CQUFlQSxHQUFHQSxJQUFJQSx1QkFBWUEsRUFBRUEsQ0FBQ0E7UUFDckNBLGdCQUFXQSxHQUFHQSxJQUFJQSx1QkFBWUEsRUFBRUEsQ0FBQ0E7SUF5RGxDQSxDQUFDQTtJQXBEQUQsNEJBQVVBLEdBQVZBLFVBQVdBLE9BQW1CQTtRQUFuQkUsdUJBQW1CQSxHQUFuQkEsY0FBbUJBO1FBRTdCQSxFQUFFQSxDQUFBQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFBQSxDQUFDQTtZQUNYQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxRQUFRQSxDQUFDQSxFQUFDQSxJQUFJQSxFQUFFQSxVQUFDQSxFQUFFQTtvQkFDdkNBLEVBQUVBLENBQUFBLENBQUNBLEVBQUVBLENBQUNBO3dCQUNMQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDZkEsSUFBSUE7d0JBQ0hBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNoQkEsQ0FBQ0E7YUFDREEsQ0FBQ0EsQ0FBQ0E7UUFDSkEsQ0FBQ0E7UUFFREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7WUFDeEJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBRWJBLE1BQU1BLENBQUNBLEtBQUtBLENBQUFBO0lBQ2JBLENBQUNBO0lBS0RGLGlDQUFlQSxHQUFmQSxVQUFnQkEsT0FBbUJBO1FBQW5CRyx1QkFBbUJBLEdBQW5CQSxjQUFtQkE7UUFFbENBLEVBQUVBLENBQUFBLENBQUNBLE9BQU9BLENBQUNBLENBQUFBLENBQUNBO1lBQ1hBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFFBQVFBLENBQUNBLEVBQUNBLElBQUlBLEVBQUVBLFVBQUNBLElBQUlBO29CQUNyQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2ZBLENBQUNBLEVBQUNBLENBQUNBLENBQUNBO1FBQ0xBLENBQUNBO1FBRURBLEVBQUVBLENBQUFBLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBO1lBQ3BCQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUUxQkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFLREgsdUJBQUtBLEdBQUxBLFVBQU1BLElBQWlCQTtRQUFqQkksb0JBQWlCQSxHQUFqQkEsV0FBaUJBO1FBQ3RCQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUM1QkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQ2pDQSxDQUFDQTtJQUtESix3QkFBTUEsR0FBTkE7UUFDQ0ssSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDakNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQzdCQSxDQUFDQTtJQUVGTCxjQUFDQTtBQUFEQSxDQTNEQSxBQTJEQ0EsSUFBQTtBQTNEWSxlQUFPLFVBMkRuQixDQUFBO0FBRUQsSUFBSSxRQUFRLEdBQUcsbUJBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN4QyxlQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQ3RCLENBQUMsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVIO0lBQUFNO0lBSUFDLENBQUNBO0lBSE9ELG9CQUFLQSxHQUFaQTtRQUNDRSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUM5QkEsQ0FBQ0E7SUFDRkYscUJBQUNBO0FBQURBLENBSkEsQUFJQ0EsSUFBQTtBQUpZLHNCQUFjLGlCQUkxQixDQUFBIiwiZmlsZSI6InNyYy9zZXJ2aWNlcy9zZXNzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZXNpb25zXG4gKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIGJpbmQgfSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XG5cbmV4cG9ydCBjbGFzcyBTZXNzaW9uIHtcblx0bG9nZ2VkaW5FbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXHR1c2VyRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXHQvKipcblx0ICogUmV0dXJuIGlmIGxvZ2dlZGluLCB3aXRoIGFuIG9wdGlvbmFsIGxpc3RlbmVyXG5cdCAqL1xuXHRpc0xvZ2dlZEluKG9ic2VydmU6IGFueSA9IG51bGwpe1xuXG5cdFx0aWYob2JzZXJ2ZSl7XG5cdFx0XHR0aGlzLmxvZ2dlZGluRW1pdHRlci5vYnNlcnZlcih7bmV4dDogKGlzKSA9PiB7XG5cdFx0XHRcdGlmKGlzKVxuXHRcdFx0XHRcdG9ic2VydmUodHJ1ZSk7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRvYnNlcnZlKGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYod2luZG93Lk1pbmRzLkxvZ2dlZEluKVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIGxvZ2dlZGluIHVzZXJcblx0ICovXG5cdGdldExvZ2dlZEluVXNlcihvYnNlcnZlOiBhbnkgPSBudWxsKXtcblxuXHRcdGlmKG9ic2VydmUpe1xuXHRcdFx0dGhpcy51c2VyRW1pdHRlci5vYnNlcnZlcih7bmV4dDogKHVzZXIpID0+IHtcblx0XHRcdFx0b2JzZXJ2ZSh1c2VyKTtcblx0XHRcdH19KTtcblx0XHR9XG5cblx0XHRpZih3aW5kb3cuTWluZHMudXNlcilcblx0XHRcdHJldHVybiB3aW5kb3cuTWluZHMudXNlcjtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFbWl0IGxvZ2luIGV2ZW50XG5cdCAqL1xuXHRsb2dpbih1c2VyIDogYW55ID0gbnVsbCl7XG5cdFx0dGhpcy51c2VyRW1pdHRlci5uZXh0KHVzZXIpO1xuXHRcdHdpbmRvdy5NaW5kcy51c2VyID0gdXNlcjtcblx0XHR0aGlzLmxvZ2dlZGluRW1pdHRlci5uZXh0KHRydWUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVtaXQgbG9nb3V0IGV2ZW50XG5cdCAqL1xuXHRsb2dvdXQoKXtcblx0XHR0aGlzLmxvZ2dlZGluRW1pdHRlci5uZXh0KGZhbHNlKTtcblx0XHR0aGlzLnVzZXJFbWl0dGVyLm5leHQobnVsbCk7XG5cdH1cblxufVxuXG52YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcblx0YmluZChTZXNzaW9uKS50b0ZhY3RvcnkoKCkgPT4ge1xuXHRcdHJldHVybiBuZXcgU2Vzc2lvbigpO1xuXHR9KVxuXSk7XG5cbmV4cG9ydCBjbGFzcyBTZXNzaW9uRmFjdG9yeSB7XG5cdHN0YXRpYyBidWlsZCgpe1xuXHRcdHJldHVybiBpbmplY3Rvci5nZXQoU2Vzc2lvbik7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==