var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var upload_1 = require('src/services/api/upload');
var client_1 = require('src/services/api/client');
var Capture = (function () {
    function Capture(upload, client) {
        this.upload = upload;
        this.client = client;
        this.uploads = [];
        this.postMeta = {};
        this.domListeners();
    }
    Capture.prototype.domListeners = function () {
    };
    Capture.prototype.uploadFile = function () {
        var self = this;
        var data = {
            guid: null,
            state: 'created',
            progress: 0
        };
        var fileInfo = document.getElementById("file").files[0];
        if (fileInfo.type.indexOf('image') > -1) {
            data.type = "image";
        }
        else if (fileInfo.type.indexOf('video') > -1) {
            data.type = "video";
        }
        else if (fileInfo.type.indexOf('audio') > -1) {
            data.type = "audio";
        }
        else {
            data.type = "unknown";
        }
        data.name = fileInfo.name;
        var index = this.uploads.push(data) - 1;
        this.upload.post('api/v1/archive', [fileInfo], data, function (progress) {
            console.log('progress update');
            console.log(progress);
            self.uploads[index].progress = progress;
        })
            .then(function (response) {
            console.log(response, response.guid);
            self.uploads[index].guid = response.guid;
            self.uploads[index].state = 'uploaded';
            self.uploads[index].progress = 100;
        })
            .catch(function (e) {
            console.error(e);
        });
    };
    Capture.prototype.modify = function (index) {
        var self = this;
        var promise = new Promise(function (resolve, reject) {
            if (self.uploads[index].guid) {
                resolve();
                return;
            }
            var interval = setInterval(function () {
                if (self.uploads[index].guid) {
                    resolve();
                    clearInterval(interval);
                }
            }, 1000);
        });
        promise.then(function () {
            self.client.post('api/v1/archive/' + self.uploads[index].guid, self.upload[index])
                .then(function (response) {
                console.log('response from modify', response);
            });
        });
    };
    Capture = __decorate([
        angular2_1.Component({
            selector: 'minds-capture',
            viewBindings: [upload_1.Upload, client_1.Client]
        }),
        angular2_1.View({
            templateUrl: 'templates/capture/capture.html',
            directives: [angular2_1.NgFor, angular2_1.FORM_DIRECTIVES]
        }), 
        __metadata('design:paramtypes', [upload_1.Upload, client_1.Client])
    ], Capture);
    return Capture;
})();
exports.Capture = Capture;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250cm9sbGVycy9jYXB0dXJlL2NhcHR1cmUudHMiXSwibmFtZXMiOlsiQ2FwdHVyZSIsIkNhcHR1cmUuY29uc3RydWN0b3IiLCJDYXB0dXJlLmRvbUxpc3RlbmVycyIsIkNhcHR1cmUudXBsb2FkRmlsZSIsIkNhcHR1cmUubW9kaWZ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLHlCQUF3RCxtQkFBbUIsQ0FBQyxDQUFBO0FBRTVFLHVCQUF1Qix5QkFBeUIsQ0FBQyxDQUFBO0FBQ2pELHVCQUF1Qix5QkFBeUIsQ0FBQyxDQUFBO0FBRWpEO0lBY0NBLGlCQUFtQkEsTUFBY0EsRUFBU0EsTUFBY0E7UUFBckNDLFdBQU1BLEdBQU5BLE1BQU1BLENBQVFBO1FBQVNBLFdBQU1BLEdBQU5BLE1BQU1BLENBQVFBO1FBSHZEQSxZQUFPQSxHQUFnQkEsRUFBRUEsQ0FBQ0E7UUFDMUJBLGFBQVFBLEdBQVNBLEVBQUVBLENBQUNBO1FBR2xCQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQTtJQUN2QkEsQ0FBQ0E7SUFFQUQsOEJBQVlBLEdBQVpBO0lBRUFFLENBQUNBO0lBRURGLDRCQUFVQSxHQUFWQTtRQUNFRyxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNoQkEsSUFBSUEsSUFBSUEsR0FBU0E7WUFDZkEsSUFBSUEsRUFBRUEsSUFBSUE7WUFDVkEsS0FBS0EsRUFBRUEsU0FBU0E7WUFDaEJBLFFBQVFBLEVBQUVBLENBQUNBO1NBQ1pBLENBQUFBO1FBRURBLElBQUlBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBRXhEQSxFQUFFQSxDQUFBQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtZQUN0Q0EsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0E7UUFDdEJBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO1lBQzdDQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUN0QkEsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7WUFDN0NBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3RCQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNOQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxTQUFTQSxDQUFDQTtRQUN4QkEsQ0FBQ0E7UUFFREEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFHMUJBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBRXhDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLEVBQUVBLElBQUlBLEVBQUVBLFVBQUNBLFFBQVFBO1lBQzVEQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO1lBQy9CQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUN0QkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7UUFDeENBLENBQUNBLENBQUNBO2FBQ0hBLElBQUlBLENBQUNBLFVBQUNBLFFBQWNBO1lBQ2ZBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ3JDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsR0FBR0EsVUFBVUEsQ0FBQ0E7WUFDdkNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLFFBQVFBLEdBQUdBLEdBQUdBLENBQUNBO1FBQ3pDQSxDQUFDQSxDQUFDQTthQUNEQSxLQUFLQSxDQUFDQSxVQUFTQSxDQUFDQTtZQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFREgsd0JBQU1BLEdBQU5BLFVBQU9BLEtBQUtBO1FBQ1ZJLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBRWhCQSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQSxFQUFFQSxNQUFNQTtZQUN4Q0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQzNCQSxPQUFPQSxFQUFFQSxDQUFDQTtnQkFDVkEsTUFBTUEsQ0FBQ0E7WUFDVEEsQ0FBQ0E7WUFDREEsSUFBSUEsUUFBUUEsR0FBR0EsV0FBV0EsQ0FBQ0E7Z0JBQ3pCQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDM0JBLE9BQU9BLEVBQUVBLENBQUNBO29CQUNWQSxhQUFhQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtnQkFDMUJBLENBQUNBO1lBQ0hBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ1hBLENBQUNBLENBQUNBLENBQUNBO1FBQ0hBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBO1lBQ1hBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7aUJBQy9FQSxJQUFJQSxDQUFDQSxVQUFDQSxRQUFjQTtnQkFDbkJBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLHNCQUFzQkEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDaERBLENBQUNBLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBLENBQUNBLENBQUNBO0lBQ0xBLENBQUNBO0lBcEZISjtRQUFDQSxvQkFBU0EsQ0FBQ0E7WUFDVEEsUUFBUUEsRUFBRUEsZUFBZUE7WUFDekJBLFlBQVlBLEVBQUVBLENBQUVBLGVBQU1BLEVBQUVBLGVBQU1BLENBQUVBO1NBQ2pDQSxDQUFDQTtRQUNEQSxlQUFJQSxDQUFDQTtZQUNKQSxXQUFXQSxFQUFFQSxnQ0FBZ0NBO1lBQzdDQSxVQUFVQSxFQUFFQSxDQUFFQSxnQkFBS0EsRUFBRUEsMEJBQWVBLENBQUVBO1NBQ3ZDQSxDQUFDQTs7Z0JBK0VEQTtJQUFEQSxjQUFDQTtBQUFEQSxDQXRGQSxBQXNGQ0EsSUFBQTtBQTdFWSxlQUFPLFVBNkVuQixDQUFBIiwiZmlsZSI6InNyYy9jb250cm9sbGVycy9jYXB0dXJlL2NhcHR1cmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXcsIE5nRm9yLCBGT1JNX0RJUkVDVElWRVMgfSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XG5cbmltcG9ydCB7IFVwbG9hZCB9IGZyb20gJ3NyYy9zZXJ2aWNlcy9hcGkvdXBsb2FkJztcbmltcG9ydCB7IENsaWVudCB9IGZyb20gJ3NyYy9zZXJ2aWNlcy9hcGkvY2xpZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWluZHMtY2FwdHVyZScsXG4gIHZpZXdCaW5kaW5nczogWyBVcGxvYWQsIENsaWVudCBdXG59KVxuQFZpZXcoe1xuICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9jYXB0dXJlL2NhcHR1cmUuaHRtbCcsXG4gIGRpcmVjdGl2ZXM6IFsgTmdGb3IsIEZPUk1fRElSRUNUSVZFUyBdXG59KVxuXG5leHBvcnQgY2xhc3MgQ2FwdHVyZSB7XG5cbiAgdXBsb2FkcyA6IEFycmF5PGFueT4gPSBbXTtcbiAgcG9zdE1ldGEgOiBhbnkgPSB7fTsgLy9UT0RPOiBtYWtlIHRoaXMgb2JqZWN0XG5cblx0Y29uc3RydWN0b3IocHVibGljIHVwbG9hZDogVXBsb2FkLCBwdWJsaWMgY2xpZW50OiBDbGllbnQpe1xuICAgIHRoaXMuZG9tTGlzdGVuZXJzKCk7XG5cdH1cblxuICBkb21MaXN0ZW5lcnMoKXtcblxuICB9XG5cbiAgdXBsb2FkRmlsZSgpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZGF0YSA6IGFueSA9IHtcbiAgICAgIGd1aWQ6IG51bGwsXG4gICAgICBzdGF0ZTogJ2NyZWF0ZWQnLFxuICAgICAgcHJvZ3Jlc3M6IDBcbiAgICB9XG5cbiAgICB2YXIgZmlsZUluZm8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbGVcIikuZmlsZXNbMF07XG5cbiAgICBpZihmaWxlSW5mby50eXBlLmluZGV4T2YoJ2ltYWdlJykgPiAtMSl7XG4gICAgICBkYXRhLnR5cGUgPSBcImltYWdlXCI7XG4gICAgfSBlbHNlIGlmKGZpbGVJbmZvLnR5cGUuaW5kZXhPZigndmlkZW8nKSA+IC0xKXtcbiAgICAgIGRhdGEudHlwZSA9IFwidmlkZW9cIjtcbiAgICB9IGVsc2UgaWYoZmlsZUluZm8udHlwZS5pbmRleE9mKCdhdWRpbycpID4gLTEpe1xuICAgICAgZGF0YS50eXBlID0gXCJhdWRpb1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnR5cGUgPSBcInVua25vd25cIjtcbiAgICB9XG5cbiAgICBkYXRhLm5hbWUgPSBmaWxlSW5mby5uYW1lO1xuICAgIC8vZmlsZS5maWxlID0gZmlsZUluZm87XG5cbiAgICBsZXQgaW5kZXggPSB0aGlzLnVwbG9hZHMucHVzaChkYXRhKSAtIDE7XG5cbiAgICB0aGlzLnVwbG9hZC5wb3N0KCdhcGkvdjEvYXJjaGl2ZScsIFtmaWxlSW5mb10sIGRhdGEsIChwcm9ncmVzcykgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3Byb2dyZXNzIHVwZGF0ZScpO1xuICAgICAgY29uc29sZS5sb2cocHJvZ3Jlc3MpO1xuICAgICAgc2VsZi51cGxvYWRzW2luZGV4XS5wcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgICAgfSlcblx0XHRcdFx0LnRoZW4oKHJlc3BvbnNlIDogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UsIHJlc3BvbnNlLmd1aWQpO1xuICAgICAgICAgIHNlbGYudXBsb2Fkc1tpbmRleF0uZ3VpZCA9IHJlc3BvbnNlLmd1aWQ7XG4gICAgICAgICAgc2VsZi51cGxvYWRzW2luZGV4XS5zdGF0ZSA9ICd1cGxvYWRlZCc7XG4gICAgICAgICAgc2VsZi51cGxvYWRzW2luZGV4XS5wcm9ncmVzcyA9IDEwMDtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XG5cdFx0XHRcdH0pO1xuICB9XG5cbiAgbW9kaWZ5KGluZGV4KXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy93ZSBkb24ndCBhbHdheXMgaGF2ZSBhIGd1aWQgcmVhZHksIHNvIGtlZXAgY2hlY2tpbmcgZm9yIG9uZVxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYoc2VsZi51cGxvYWRzW2luZGV4XS5ndWlkKXtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGlmKHNlbGYudXBsb2Fkc1tpbmRleF0uZ3VpZCl7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcbiAgICB9KTtcbiAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgc2VsZi5jbGllbnQucG9zdCgnYXBpL3YxL2FyY2hpdmUvJyArIHNlbGYudXBsb2Fkc1tpbmRleF0uZ3VpZCwgc2VsZi51cGxvYWRbaW5kZXhdKVxuICAgICAgICAudGhlbigocmVzcG9uc2UgOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygncmVzcG9uc2UgZnJvbSBtb2RpZnknLCByZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==